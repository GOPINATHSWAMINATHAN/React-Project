{"ast":null,"code":"var _jsxFileName = \"/Users/gopi.s/Desktop/mosaic/mosaic-react-assessment/mosaic-front-end/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport Students from \"./students/Students\";\nimport SearchName from \"./students/NameSearch\";\nimport SearchTag from \"./students/SearchTag\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [studentData, setStudentData] = useState([]);\n  const [studentNameFilter, setStudentNameFilter] = useState(\"\");\n  const [tagFilter, setTagFilter] = useState(\"\"); // API CALL\n\n  async function fetchURL(url) {\n    const response = await fetch(url);\n    const data = await response.json();\n    const students = data.students;\n    students.forEach(student => {\n      student.tags = [];\n    });\n    setStudentData(students);\n  } //USE EFFECT\n\n\n  useEffect(() => {\n    fetchURL(`https://api.hatchways.io/assessment/students`);\n  }, []); // Searching Name\n\n  const nameFilter = filterString => {\n    if (filterString && filterString.toLowerCase) {\n      filterString = filterString.toLowerCase();\n    }\n\n    let filtered = [];\n    studentData.forEach(student => {\n      const fullName = `${student.firstName} ${student.lastName}`.toLowerCase();\n\n      if (!filterString || fullName.includes(filterString)) {\n        filtered.push(student);\n      }\n    });\n    return filtered;\n  }; // TO FIND AN AVERAGE GRADE\n\n\n  function getAverage(array) {\n    let total = 0;\n\n    for (let i = 0; i < array.length; i++) {\n      total += parseInt(array[i]);\n    }\n\n    let totalAverage = total / array.length;\n    return totalAverage;\n  }\n\n  const filteredByNameStudents = nameFilter(studentNameFilter);\n  const filteredByTagStudents = searchTags(tagFilter);\n  const combinedFilteredStudents = []; //Combining the search\n\n  filteredByNameStudents.forEach(student => {\n    if (filteredByTagStudents.includes(student)) {\n      combinedFilteredStudents.push(student);\n    }\n  }); // Add tag to student\n\n  const createTag = (student, newTag) => {\n    student.tags.push(newTag);\n    const indexOfStudent = studentData.findIndex(s => s.id === student.id);\n    let dataWithChanges = [...studentData.slice(0, indexOfStudent), student, ...studentData.slice(indexOfStudent + 1)];\n    setStudentData(dataWithChanges);\n  }; // Tag Search\n\n\n  const searchTags = tagInput => {\n    if (tagInput && tagInput.toLowerCase) {\n      tagInput = tagInput.toLowerCase();\n    }\n\n    let searchTagsArray = [];\n    studentData.forEach(student => {\n      let tagExists = false;\n      student.tags.forEach(t => {\n        if (t.toLowerCase().includes(tagInput)) {\n          tagExists = true;\n        }\n      });\n\n      if (!tagInput || tagExists) {\n        searchTagsArray.push(student);\n      }\n    });\n    return searchTagsArray;\n  }; //return UI\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      style: {\n        borderRadius: '10px',\n        overflow: 'hidden',\n        elevation: '5px'\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"searchName\",\n          fontFamily: \"Raleway\",\n          fontSize: \"100px\",\n          children: /*#__PURE__*/_jsxDEV(SearchName, {\n            handleNameSearch: setStudentNameFilter,\n            placeholder: \"Search by name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"searchTag\",\n          fontFamily: \"Raleway\",\n          children: /*#__PURE__*/_jsxDEV(SearchTag, {\n            handleSearchTag: setTagFilter,\n            placeholder: \"Search by tag\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            overflow: \"auto\",\n            height: \"500px\"\n          },\n          children: [\" \", /*#__PURE__*/_jsxDEV(Students, {\n            students: combinedFilteredStudents,\n            handleAverage: getAverage,\n            createTagForStudent: createTag\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"hsfUPi7vBcnfP/lVy8xR8Kp661Y=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/gopi.s/Desktop/mosaic/mosaic-react-assessment/mosaic-front-end/src/App.js"],"names":["React","useState","useEffect","Students","SearchName","SearchTag","Card","CardContent","App","studentData","setStudentData","studentNameFilter","setStudentNameFilter","tagFilter","setTagFilter","fetchURL","url","response","fetch","data","json","students","forEach","student","tags","nameFilter","filterString","toLowerCase","filtered","fullName","firstName","lastName","includes","push","getAverage","array","total","i","length","parseInt","totalAverage","filteredByNameStudents","filteredByTagStudents","searchTags","combinedFilteredStudents","createTag","newTag","indexOfStudent","findIndex","s","id","dataWithChanges","slice","tagInput","searchTagsArray","tagExists","t","borderRadius","overflow","elevation","height"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport Students from \"./students/Students\";\nimport SearchName from \"./students/NameSearch\";\nimport SearchTag from \"./students/SearchTag\";\n\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\n\n\nconst App = () => {\n  const [studentData, setStudentData] = useState([]);\n  const [studentNameFilter, setStudentNameFilter] = useState(\"\");\n  const [tagFilter, setTagFilter] = useState(\"\");\n\n  // API CALL\n\n  async function fetchURL(url) {\n    const response = await fetch(url);\n    const data = await response.json();\n    const students = data.students;\n    students.forEach((student) => {\n      student.tags = [];\n    });\n    setStudentData(students);\n  }\n\n  //USE EFFECT\n  useEffect(() => {\n    fetchURL(`https://api.hatchways.io/assessment/students`);\n  }, []);\n\n  // Searching Name\n\n  const nameFilter = (filterString) => {\n    if (filterString && filterString.toLowerCase) {\n      filterString = filterString.toLowerCase();\n    }\n    let filtered = [];\n    studentData.forEach((student) => {\n      const fullName = `${student.firstName} ${student.lastName}`.toLowerCase();\n\n      if (!filterString || fullName.includes(filterString)) {\n        filtered.push(student);\n      }\n    });\n    return filtered;\n  };\n  // TO FIND AN AVERAGE GRADE\n\n  function getAverage(array) {\n    let total = 0;\n    for (let i = 0; i < array.length; i++) {\n      total += parseInt(array[i]);\n    }\n    let totalAverage = total / array.length;\n    return totalAverage;\n  }\n\n  const filteredByNameStudents = nameFilter(studentNameFilter);\n  const filteredByTagStudents = searchTags(tagFilter);\n  const combinedFilteredStudents = [];\n\n  //Combining the search\n\n  filteredByNameStudents.forEach((student) => {\n    if (filteredByTagStudents.includes(student)) {\n      combinedFilteredStudents.push(student);\n    }\n  });\n// Add tag to student\n\nconst createTag = (student, newTag) => {\n  student.tags.push(newTag);\n\n  const indexOfStudent = studentData.findIndex((s) => s.id === student.id);\n  let dataWithChanges = [\n    ...studentData.slice(0, indexOfStudent),\n    student,\n    ...studentData.slice(indexOfStudent + 1),\n  ];\n  setStudentData(dataWithChanges);\n};\n\n// Tag Search\n\nconst searchTags = (tagInput) => {\n  if (tagInput && tagInput.toLowerCase) {\n    tagInput = tagInput.toLowerCase();\n  }\n\n  let searchTagsArray = [];\n  studentData.forEach((student) => {\n    let tagExists = false;\n    student.tags.forEach((t) => {\n      if (t.toLowerCase().includes(tagInput)) {\n        tagExists = true;\n      }\n    });\n\n    if (!tagInput || tagExists) {\n      searchTagsArray.push(student);\n    }\n  });\n  return searchTagsArray;\n};\n//return UI\n  return (\n    <div className=\"container\">\n      <Card style={{borderRadius: '10px', overflow: 'hidden',elevation:'5px'}} >\n        <CardContent>\n          <div className=\"searchName\" fontFamily=\"Raleway\" fontSize=\"100px\">\n            <SearchName\n              handleNameSearch={setStudentNameFilter}\n              placeholder=\"Search by name\"\n            />\n          </div>\n\n          <div className=\"searchTag\" fontFamily=\"Raleway\">\n            <SearchTag\n              handleSearchTag={setTagFilter}\n              placeholder=\"Search by tag\"\n            />\n          </div>\n          <div style={{overflow:\"auto\", height:\"500px\"}}>\n            {\" \"}\n            <Students\n              students={combinedFilteredStudents}\n              handleAverage={getAverage}\n              createTagForStudent={createTag}\n            />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}