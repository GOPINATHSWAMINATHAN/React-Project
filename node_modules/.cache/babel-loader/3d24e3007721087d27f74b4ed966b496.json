{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport merge from './merge';\n\nfunction compose() {\n  for (var _len = arguments.length, styles = new Array(_len), _key = 0; _key < _len; _key++) {\n    styles[_key] = arguments[_key];\n  }\n\n  const fn = props => styles.reduce((acc, style) => {\n    const output = style(props);\n\n    if (output) {\n      return merge(acc, output);\n    }\n\n    return acc;\n  }, {}); // Alternative approach that doesn't yield any performance gain.\n  // const handlers = styles.reduce((acc, style) => {\n  //   style.filterProps.forEach(prop => {\n  //     acc[prop] = style;\n  //   });\n  //   return acc;\n  // }, {});\n  // const fn = props => {\n  //   return Object.keys(props).reduce((acc, prop) => {\n  //     if (handlers[prop]) {\n  //       return merge(acc, handlers[prop](props));\n  //     }\n  //     return acc;\n  //   }, {});\n  // };\n\n\n  fn.propTypes = process.env.NODE_ENV !== 'production' ? styles.reduce((acc, style) => _extends(acc, style.propTypes), {}) : {};\n  fn.filterProps = styles.reduce((acc, style) => acc.concat(style.filterProps), []);\n  return fn;\n}\n\nexport default compose;","map":{"version":3,"sources":["/Users/gopi.s/Desktop/mosaic/mosaic-react-assessment/mosaic-front-end/node_modules/@material-ui/system/es/compose.js"],"names":["_extends","merge","compose","styles","fn","props","reduce","acc","style","output","propTypes","process","env","NODE_ENV","filterProps","concat"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,SAASC,OAAT,GAA4B;AAAA,oCAARC,MAAQ;AAARA,IAAAA,MAAQ;AAAA;;AAC1B,QAAMC,EAAE,GAAGC,KAAK,IAAIF,MAAM,CAACG,MAAP,CAAc,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAChD,UAAMC,MAAM,GAAGD,KAAK,CAACH,KAAD,CAApB;;AAEA,QAAII,MAAJ,EAAY;AACV,aAAOR,KAAK,CAACM,GAAD,EAAME,MAAN,CAAZ;AACD;;AAED,WAAOF,GAAP;AACD,GARmB,EAQjB,EARiB,CAApB,CAD0B,CASlB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGAH,EAAAA,EAAE,CAACM,SAAH,GAAeC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCV,MAAM,CAACG,MAAP,CAAc,CAACC,GAAD,EAAMC,KAAN,KAAgBR,QAAQ,CAACO,GAAD,EAAMC,KAAK,CAACE,SAAZ,CAAtC,EAA8D,EAA9D,CAAxC,GAA4G,EAA3H;AACAN,EAAAA,EAAE,CAACU,WAAH,GAAiBX,MAAM,CAACG,MAAP,CAAc,CAACC,GAAD,EAAMC,KAAN,KAAgBD,GAAG,CAACQ,MAAJ,CAAWP,KAAK,CAACM,WAAjB,CAA9B,EAA6D,EAA7D,CAAjB;AACA,SAAOV,EAAP;AACD;;AAED,eAAeF,OAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport merge from './merge';\n\nfunction compose(...styles) {\n  const fn = props => styles.reduce((acc, style) => {\n    const output = style(props);\n\n    if (output) {\n      return merge(acc, output);\n    }\n\n    return acc;\n  }, {}); // Alternative approach that doesn't yield any performance gain.\n  // const handlers = styles.reduce((acc, style) => {\n  //   style.filterProps.forEach(prop => {\n  //     acc[prop] = style;\n  //   });\n  //   return acc;\n  // }, {});\n  // const fn = props => {\n  //   return Object.keys(props).reduce((acc, prop) => {\n  //     if (handlers[prop]) {\n  //       return merge(acc, handlers[prop](props));\n  //     }\n  //     return acc;\n  //   }, {});\n  // };\n\n\n  fn.propTypes = process.env.NODE_ENV !== 'production' ? styles.reduce((acc, style) => _extends(acc, style.propTypes), {}) : {};\n  fn.filterProps = styles.reduce((acc, style) => acc.concat(style.filterProps), []);\n  return fn;\n}\n\nexport default compose;"]},"metadata":{},"sourceType":"module"}